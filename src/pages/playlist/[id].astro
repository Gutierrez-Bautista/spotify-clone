---
import type { GetStaticPaths } from "astro";
import Layout from "@/layouts/Layout.astro";

import { playlists, songs, type Playlist, type Song } from '@/lib/data'

import { Image } from "astro:assets";
import BackArrowIcon from '@/icons/BackArrow.astro'
import PlaylistSongItem from "@/components/PlaylistSongItem.astro";
import PlayIcon from "@/icons/Play.astro";
import Clock from "@/icons/Clock.astro";

interface Props {
  playlist: Playlist
  playlistSongs: Song[]
}

export const getStaticPaths = (() => {
  return playlists.map(l => {
    const playlistSongs = songs.filter(s => s.albumId === l.albumId)

    return {
      params: {id: l.id},
      props: {
        playlist: l,
        playlistSongs
      }
    }
  })
}) satisfies GetStaticPaths;

const { playlist, playlistSongs } = Astro.props

const bgContext = '--background-color: ' + playlist.color.accent
---

<Layout title={`playlist | ${playlist.title}`} >
  <div class='min-h-full m-1 overflow-auto rounded-xl relative bg-zinc-900 inset-0'>
    <header class="relative flex flex-col mt-5 p-5 gap-5 z-10">
      <a href="/" class="w-8 h-8 rounded-full bg-zinc-900/90 flex justify-center items-center font-extrabold z-10 p-2 transition ease-in-out duration-200 hover:bg-zinc-900 hover:scale-110 cursor-pointer">
        <BackArrowIcon />
      </a>

      <div class="flex gap-5 h-[14rem]">
        <Image inferSize src={playlist.cover} alt={playlist.title} class="w-[14rem]" transition:name=`image-${playlist.albumId}` />
  
        <div class="h-full flex flex-col justify-end">
          <span class="text-lg">Playlist</span>
          <h2 transition:name=`title-${playlist.albumId}` class="text-7xl font-bold mb-7">{playlist.title}</h2>
          <span class="opacity-95">{playlist.artists.join(', ')}</span>
        </div>
      </div>

    </header>

    <div class="bg-zinc-900/40 p-7 relative z-10">
      <button class="w-12 h-12 rounded-full bg-green-500 text-black flex justify-center items-center hover:scale-105 shadow-md cursor-pointer">
        <PlayIcon />
      </button>

      <table class="table-auto text-left divide-y-2 divide-gray-500/40 min-w-full mt-3">
        <thead>
          <tr class="text-gray-300">
            <th class="font-normal whitespace-nowrap px-3 py-2">#</th>
            <th class="font-normal whitespace-nowrap px-3 py-2">Title</th>
            <th class="font-normal whitespace-nowrap px-3 py-2">Album</th>
            <th class="font-normal whitespace-nowrap px-3 py-2 text-right">
              <Clock />
            </th>
          </tr>
        </thead>
        <tbody>
          {
            playlistSongs.map(s => (
              <PlaylistSongItem song={s} />
            ))
          }
        </tbody>
      </table>
      <div>
      </div>
    </div>

    <div class="absolute z-[1] top-0 left-0 w-full h-screen inset-0 bg-gradient-to-b from-context" style={bgContext}>
      <Image inferSize src={playlist.cover} alt={playlist.title} class="absolute mx-auto h-full w-auto max-h-screen opacity-20 inset-0 blur-md" />
  
      <div class="absolute inset-0 bg-gradient-to-t from-zinc-900 via-transparent"></div>
    </div>

  </div>
</Layout>

<style>
  .from-context {
    --tw-gradient-from: var(--background-color);
    --tw-gradient-to: #fff0, var(--tw-gradient-to-position);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
</style>